import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt

# Încărcarea datelor
data = pd.read_csv('sales.csv')

# Verificarea datelor
print(data.info())
print(data.head())

# Preprocesarea datelor
features = ['Marketing', 'Inventory', 'COGS']
target = 'Sales'

X = data[features]
y = data[target]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Regresia liniară tradițională
model_lr = LinearRegression()
model_lr.fit(X_train_scaled, y_train)

y_pred_lr = model_lr.predict(X_test_scaled)
rmse_lr = mean_squared_error(y_test, y_pred_lr, squared=False)
print(f"RMSE - Regresia Liniară Tradițională: {rmse_lr}")

# Regresia Liniară Bayesiană
# Inițializăm numărul de eșantioane pentru distribuțiile prior
n_samples = 1000
np.random.seed(42)

# Distribuțiile prior pentru intercept și coeficienți
intercept_samples = np.random.normal(loc=0, scale=10, size=n_samples)
coeff_samples = np.random.normal(loc=0, scale=10, size=(n_samples, X_train_scaled.shape[1]))
sigma_samples = np.abs(np.random.normal(loc=1, scale=0.5, size=n_samples))  # Valori pozitive pentru sigma

# Generăm predicții pentru setul de testare
intercept_samples_expanded = np.tile(intercept_samples[:, None], (1, X_test_scaled.shape[0])).T
y_pred_bayes_samples = intercept_samples_expanded + np.dot(X_test_scaled, coeff_samples.T)

# Calculăm media predicțiilor pentru fiecare instanță
y_pred_bayes = y_pred_bayes_samples.mean(axis=1)

# Calculăm RMSE pentru modelul bayesian
rmse_bayes = mean_squared_error(y_test, y_pred_bayes, squared=False)
print(f"RMSE - Regresia Liniară Bayesiană: {rmse_bayes}")

# Compararea RMSE
print(f"RMSE Tradițională: {rmse_lr}")
print(f"RMSE Bayesiană: {rmse_bayes}")

# Vizualizarea distribuției predicțiilor pentru modelul bayesian
plt.hist(y_pred_bayes_samples.mean(axis=1), bins=30, alpha=0.7, label='Predicții Bayesiană')
plt.axvline(y_pred_lr.mean(), color='red', linestyle='--', label='Predicții Tradițională (Media)')
plt.legend()
plt.title("Compararea Distribuției Predicțiilor")
plt.xlabel("Valoarea Predicției")
plt.ylabel("Frecvență")
plt.show()
